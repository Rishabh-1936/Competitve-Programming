Problem :Max and Electrical Panel (https://www.codechef.com/DEC18B/problems/MAXEP)
Solution :
Use binary search, but split segment as 1:9.

EXPLANATION:
Let's count what amount of coins you have to use to find arbitrary number x if there are N variants of it.
dp1=0
dpN=miny=2Nmax(1+c+dpy,1+dpN-y)
This formula would take O(n2) to be computed, but luckily 103 coins is way more than enough to guess the number and we may allow ourself some margin from optimal solution. You may see that if for segment [l;r] we will take y=(9l+r)/10, it will allow you to guess any number x=1.5×105 for c=150 in at most 603 coin. Thus you may modify binary search to solve the problem:

//g++  5.4.0

#include <bits/stdc++.h>
using namespace std;
#define ll long long

int main()
{int N, c;
cin >> N >> c;
int L = 1, R = N;
while(R - L >= 1) {
    int y = (9 * L + R) / 10;
    cout << 1 << ' ' << y << endl;
    int res;
    cin >> res;
    if(res == 0) {
        L = y + 1;
    } else {
        R = y;
        cout << 2 << endl;
    }
}
cout << 3 << ' ' << L << endl;
return 0;
   
}

//======================================

#include <bits/stdc++.h>

using namespace std;


int n,c,sz,i;


int query(int x) {

	printf("1 %d\n",x);

	fflush(stdout);
	
                    int t;
	
                    scanf("%d",&t);

	return t;

	}
	

int main()
{

	scanf("%d%d",&n,&c);
	
	sz=sqrt(n);

	for (i=1;i*sz<=n;i++) {
	
	int tmp=query(i*sz);
	
	if (tmp==1) {
		puts("2");
		 fflush(stdout); break;
		}

	}
	
	for (int j=(i-1)*sz+1;j<=min(i*sz,n);j++) {

	        int tmp=query(j);
	

		if (tmp==1) {
		
		printf("3 %d\n",j);
		
		return 0;
		
}
	
}
	
return 0;

}