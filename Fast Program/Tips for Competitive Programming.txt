1)   getchar_unlocked() – faster input in C/C++ for Competitive Programming

Following are some important points:

i)   Since it is not thread safe, all overheads of mutual exclusion are avoided and it is faster than getchar().
ii)  Can be especially useful for competitive programming problems with “Warning: Large I/O data, be careful with certain languages (though most should be OK if the              algorithm is well designed)”.
iii) There is no issue with using getchar_unlocked() even in multithreaded environment as long as the thread using it is the only thread accessing file object.
iv) One more difference with getchar() is, it is not a C standard library function, but a POSIX function. It may not work on Windows based compilers.
v)   It is a known fact than scanf() is faster than cin and getchar() is faster than scanf() in general. getchar_unlocked() is faster than getchar(), hence fastest of all.
vi)  Similarly, there are getc_unlocked() putc_unlocked(), and putchar_unlocked() which are non-thread-safe versions of getc(), putc() and putchar() respectively.// A 

	#include <stdio.h> 
	int main() 
	{ 
		char c = getchar_unlocked(); 
		putchar_unlocked(c); 
		return 0; 
	}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2)  It is often recommended to use scanf/printf instead of cin/cout for a fast input and output. However, you can still use cin/cout and achieve the same speed as       scanf/printf by including the following two lines in your main() function:

	    ios_base::sync_with_stdio(false);

      It toggles on or off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first       input or output operation. Adding ios_base::sync_with_stdio (false); (which is true by default) before any I/O operation avoids this synchronization. It is a static                 member of function of std::ios_base.
    		
		cin.tie(NULL);

       tie() is a method which simply guarantees the flushing of std::cout before std::cin accepts an input. This is useful for interactive console programs which require the        console to be updated constantly but also slows down the program for large I/O. The NULL part just returns a NULL pointer.


